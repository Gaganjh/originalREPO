package com.manulife.pension.ps.web.taglib.search;



import java.io.IOException;
import java.lang.reflect.InvocationTargetException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.log4j.Logger;

import com.manulife.pension.exception.SystemException;
import com.manulife.pension.ps.web.Constants;
import com.manulife.pension.ps.web.controller.UserProfile;
import com.manulife.pension.ps.web.util.SessionHelper;
import com.manulife.pension.reference.FundReference;
import com.manulife.pension.reference.Reference;
import com.manulife.pension.service.searchengine.SearchResult;
import com.manulife.pension.util.log.LogUtility;


/**
 * Generate a link for a specified {@link Reference Reference}.
 * <p>
 * This tag use the {@link UrlGeneratorFactory UrlGeneratorFactory} to get a
 * {@link UrlGenerator UrlGenerator} for the {@link Reference Reference} specified
 * with {@link #getBeanId() beanId} and {@link #getProperty() property}.
 * <p>
 * This tag will look in any scope for the JavaBean specified with the
 * {@link #getBeanId() beanId} property. It will then get the property named with
 * {@link #getProperty() property} to retrieve the {@link Reference Reference}
 * object.
 *
 * @author Emmanuel Pirsch
 * @version 1.0
 */

public class UrlGeneratorTag extends TagSupport {
    private static Logger logger= Logger.getLogger(UrlGeneratorTag.class.getName());
    private static String definedContributionAdminGuideUrl = "/do/contentpages/userguide/landingpage/?parentId=73";
    private static String definedBenefitAdminGuideUrl = "/do/contentpages/userguide/landingpage/?parentId=97";

    /** @see #getBeanId() */
    private String beanId;

    /** @see #getProperty() */
    private String property;

    /** @see #getTitle() */
    private String title;

    /** @see #getTitleproperty */
    private String titleProperty;

    public UrlGeneratorTag() {
    }

    /**
     * The <code>beanId</code> property contain the name of a JavaBean in
     * some scope from which the {@link Reference Reference} object will be
     * retrieved.
     *
     * @return the name of the bean in some scope from which the
     * {@link Reference Reference} object will be returned.
     */
    public String getBeanId() {
        return beanId;
    }

    /**
     * Change the {@link #getBeanId beanId} property.
     *
     * @param beanId the new value of the property.
     */
    public void setBeanId(String beanId) {
        this.beanId= beanId;
    }

    /**
     * The <code>property</code> property contain the name of a
     * {@link #getBeanId beanId} property that contain the
     * {@link Reference Reference} object that will be use to generate the url.
     *
     * @return the name of the property in {@link #getBeanId beanId} that contain
     * a {@link Reference Reference} object.
     */
    public String getProperty() {
        return property;
    }

    /**
     * Change the {@link #getProperty property} property.
     *
     * @param property the new value of the property.
     */
    public void setProperty(String property) {
        this.property= property;
    }

    /** The <code>title</code> property contain the title of the link that
     * will be generated by this tag. If this property is <code>null</code>
     * when the {@link #doEndTag() doEndTag()} method is called, then the
     * link title will be the same as the generated link.
     *
     * @return the value of the <code>title</code> property.
     */
    public String getTitle() {
        return title;
    }

    /**
     * Change the {@link #getTitle() title} property.
     *
     * @param title the new value of the {@link #getTitle() title} property.
     */
    public void setTitle(String title) {
        this.title= title;
    }

    /**
     * The <code>titleProperty</code> property containt the name of the
     * {@link #getBeanId() beanId} property that contain the link title.
     *
     * @return the value of the <code>titleProperty</code> property.
     */
    public String getTitleProperty() {
        return titleProperty;
    }

    /**
     * Change the {@link #getTitleProperty titleProperty} property.
     *
     * @param titleProperty the new value for the
     * {@link #getTitleProperty() titleProperty} property.
     */
    public void setTitleProperty(String titleProperty) {
        this.titleProperty= titleProperty;
    }

    public int doEndTag() throws javax.servlet.jsp.JspException {
        try {
            JspWriter out= pageContext.getOut();
            out.print("</a>");
        } catch (IOException unableToWriteToOut) {
            if (logger.isDebugEnabled()) {
            	logger.debug("Cannot write to JSP out", unableToWriteToOut);
        	}
        }
        return super.doEndTag();
    }

    public int doStartTag() throws javax.servlet.jsp.JspException {
        try {
            
            UserProfile userProfile = SessionHelper.getUserProfile((HttpServletRequest)pageContext.getRequest());
            boolean isDefinedBenefitContract = userProfile.getCurrentContract().isDefinedBenefitContract();

            Object bean= pageContext.findAttribute(beanId);
            Reference reference= (Reference)PropertyUtils.getProperty(bean, property);
            if (logger.isDebugEnabled() && (reference == null)) {
                logger.debug("reference for "+PropertyUtils.getProperty(bean, "title")+"("+PropertyUtils.getProperty(bean, "content")+")"+" is null!");
            }
            String displayTitle= titleProperty == null ? title : (String)PropertyUtils.getProperty(bean, titleProperty);

            UrlGenerator urlGenerator= UrlGeneratorFactory.getInstance().getGenerator(reference);

            String url= urlGenerator.generateUrl(reference, UrlGeneratorTagConfig.getInstance().getProperties(  pageContext.getSession(), (HttpServletRequest)pageContext.getRequest() ), (SearchResult)bean);

            // override with defined benefit's admin guide
            if (isDefinedBenefitContract &&
                    url.equalsIgnoreCase(definedContributionAdminGuideUrl)) {
                url = definedBenefitAdminGuideUrl;
            }
            
            JspWriter out= pageContext.getOut();
            
            if (reference instanceof FundReference) {
            	FundReference fundRef = (FundReference) reference;
 	          	StringBuffer buff = new StringBuffer();
             	buff.append("<a href='#fundsheet';return true' NAME='");
            	buff.append(fundRef.getId());
            	buff.append("' onClick='FundWindow(\"");
            	buff.append(url);
            	buff.append("\")'>");
            	out.print(buff.toString());
            } else {
             	out.print("<a href=\"");
            	out.print(url);
            	out.print("\">");
            }
        } catch (NoSuchMethodException unableToFindTheSpecifiedProperty) {
        	SystemException se = new SystemException(unableToFindTheSpecifiedProperty, this.getClass().getName(), "doStartTag", "Unable to find the specified property");
        	LogUtility.logSystemException(Constants.PS_APPLICATION_ID,se);
        } catch (InvocationTargetException unableToInvokePropertyGetter) {
        	SystemException se = new SystemException(unableToInvokePropertyGetter, this.getClass().getName(), "doStartTag", "Unable to invoke property getter");
        	LogUtility.logSystemException(Constants.PS_APPLICATION_ID,se);        	
        } catch (IllegalAccessException notAllowedToInvokePropertyGetter) {
        	SystemException se = new SystemException(notAllowedToInvokePropertyGetter, this.getClass().getName(), "doStartTag", "Not allowed to invoke property getter");
        	LogUtility.logSystemException(Constants.PS_APPLICATION_ID,se);        	
        } catch (UrlGeneratorNotFoundException cannotFindAUrlGeneratorForReference) {
        	SystemException se = new SystemException(cannotFindAUrlGeneratorForReference, this.getClass().getName(), "doStartTag", "Cannot find a URLGenrator for Reference");
        	LogUtility.logSystemException(Constants.PS_APPLICATION_ID,se);        	
        } catch (IOException unableToWriteToOut) {
        	SystemException se = new SystemException(unableToWriteToOut, this.getClass().getName(), "doStartTag", "Cannot write to JSP out");
        	LogUtility.logSystemException(Constants.PS_APPLICATION_ID,se);        	
        }
        return EVAL_BODY_INCLUDE;
    }
}

